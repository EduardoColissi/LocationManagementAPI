
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int @id @default(autoincrement())
  name      String @db.VarChar(100)
  cellphone String @db.VarChar(100)
  email     String @unique @db.VarChar(100)
  password  String @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  properties Property[]
  periods Period[]
  prices Price[]
  locations Location[]

  @@map("users")
}

model Property {
  id            Int @id @default(autoincrement())
  description   String @db.VarChar(300)
  street        String @db.VarChar(160)
  number        Int @db.Int
  complement    String @db.VarChar(160)
  neighborhood  String @db.VarChar(160)
  city          String @db.VarChar(160)
  state         String @db.VarChar(160)
  country       String @db.VarChar(160)
  zip_code      String @db.VarChar(8)
  house         Boolean
  apartment     Boolean
  rooms         Int
  pet_friendly  Boolean
  bed_linen     Boolean
  towels        Boolean
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user_id       Int
  user          User @relation(fields: [user_id], references: [id])
  locations     Location[]

  @@map("properties")
}

model Period {
  id       Int @id @default(autoincrement())
  start_date DateTime
  end_date DateTime
  description String @db.VarChar(300)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  prices Price[]

  @@map("periods")
}

model Price {
  id      Int @id @default(autoincrement())
  price   Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  period_id Int
  location_id Int
  user_id Int
  period Period @relation(fields: [period_id], references: [id])
  location Location @relation(fields: [location_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@map("prices")
}

model Location {
  id     Int @id @default(autoincrement())
  start_date DateTime
  end_date DateTime
  price_per_day Float
  descount Float
  additional_cost Float
  observations String @db.VarChar(300)
  total Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  property_id Int
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])
  prices Price[]

  @@map("locations")
}